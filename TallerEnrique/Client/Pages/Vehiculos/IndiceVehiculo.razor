
@page "/vehiculos"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject HttpClient Http
@using System.Text.Json
@inject NavigationManager NavigationManager

<div class="form-group">
    <a class="btn btn-info" href="vehiculos/crear">Agregar Vehiculo</a>
</div>

@if (Vehiculos == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-grow text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (Vehiculos.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron registros.</text>
    </div>
}
else
{
    <MudTable Items="@Vehiculos" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Vehiculo, bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Vehiculos</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar vehículo..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Cliente</MudTh>
            <MudTh Class="thead-dark">Marca</MudTh>
            <MudTh>Modelo</MudTh>
            <MudTh>Color</MudTh>
            <MudTh>Placa</MudTh>
            <MudTh>Año</MudTh>
            <MudTh>Kilometraje</MudTh>
            <MudTh>Fecha Entrada</MudTh>
            <MudTh>Fecha Salida</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Marca">@context.Cliente.Nombres</MudTd>
            <MudTd DataLabel="Marca">@context.Marca</MudTd>
            <MudTd DataLabel="modelo">@context.Modelo</MudTd>
            <MudTd DataLabel="Color">@context.Color</MudTd>
            <MudTd DataLabel="Placa">@context.Placa</MudTd>
            <MudTd DataLabel="Año">@context.YearCar</MudTd>
            <MudTd DataLabel="Kilometraje">@context.Kilometraje</MudTd>
            <MudTd DataLabel="Fecha Entrada">@context.FechaEntrada.ToShortDateString()</MudTd>
            <MudTd DataLabel="Fecha Salida">@context.FechaSalida.ToShortDateString()</MudTd>
            <MudTd>
                <MudFab Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Edit" Size="MudBlazor.Size.Small"
                        @onclick="@(() => NavigationManager.NavigateTo($"/vehiculos/editar/{context.Id}"))" />
                <a href="/vehiculos/editar/@context.Id" class="btn btn-success">Editar</a>
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private Vehiculo selectedItem1 = null;
    private string searchString1 = "";
    private string NombreArtFiltro = String.Empty; //filtros
    //Paginacion
    private int paginaActual = 1;
    private int paginasTotales;

    public List<Vehiculo> Vehiculos { get; set; }
    public List<Cliente> Clientes { get; set; } = new List<Cliente>();

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        var httpResponse = await Http.GetAsync($"api/vehiculos/cargartodos");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            Vehiculos = JsonSerializer.Deserialize<List<Vehiculo>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }

    }

    private async Task BorrarVehiculo(Vehiculo vehiculo)
    {
        var responseHttp = await repositorio.Delete($"api/vehiculos/{vehiculo.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }

    //Paginacion
    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }
    private async Task Cargar(int pagina = 1)
    {
        var responseHttp = await repositorio.Get<List<Vehiculo>>($"api/vehiculos?pagina={pagina}");
        if (!responseHttp.Error)
        {
            Vehiculos = responseHttp.Response;
            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }
    ///Buscar por nombre
    private bool FilterFunc1(Vehiculo element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Vehiculo element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Marca.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Modelo.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Color.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Placa.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.FechaEntrada.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.FechaSalida.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.YearCar.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Kilometraje.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task Filtrar()
    {
        await Cargar();
    }

    private async Task Limpiar()
    {
        NombreArtFiltro = string.Empty;
        await Cargar();
    }
}