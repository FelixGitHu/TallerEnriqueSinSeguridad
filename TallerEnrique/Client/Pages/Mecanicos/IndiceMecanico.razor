@page "/mecanicos"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes

<h3>Mecánicos</h3>

<div class="form-group">
    <a class="btn btn-info" href="mecanicos/crear">Agregar mecánico</a>
</div>

<ListadoGenerico Listado="Mecanicos">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Acción</th>
                    <th>Nombres</th>
                    <th>Apellidos</th>
                    <th>Teléfono</th>
                    <th>Dirección</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Mecanicos)
                {
                    <tr>
                        <td>
                            <a href="/mecanicos/editar/@item.Id" class="btn btn-success">Editar</a>
                            <button @onclick="@(() => BorrarMecanico(item))" class="btn btn-danger">Borrar</button>
                        </td>
                        <td>@item.Nombre</td>
                        <td>@item.Apellido</td>
                        <td>@item.Telefono</td>
                        <td>@item.Direccion</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>
@*Paginaccion*@
<Paginaciones PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada"
              PaginasTotales="paginasTotales"></Paginaciones>

@code {
    //Paginacion
    private int paginaActual = 1;
    private int paginasTotales;

    public List<Mecanico> Mecanicos { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    //Paginacion
    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }
    private async Task Cargar(int pagina = 1)
    {
        var responseHttp = await repositorio.Get<List<Mecanico>>($"api/mecanicos?pagina={pagina}");
        if (!responseHttp.Error)
        {
            Mecanicos = responseHttp.Response;
            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }

    private async Task Cargar()
    {
        var responseHttp = await repositorio.Get<List<Mecanico>>("api/mecanicos");
        Mecanicos = responseHttp.Response;
    }

    private async Task BorrarMecanico(Mecanico mecanico)
    {
        var responseHttp = await repositorio.Delete($"api/mecanicos/{mecanico.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }
}