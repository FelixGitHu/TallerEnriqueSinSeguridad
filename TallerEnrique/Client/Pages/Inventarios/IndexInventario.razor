@page "/inventarios"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject HttpClient Http
@using System.Text.Json
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "admin, vendedor")]

<h4>Repuestos Disponibles en Inventario</h4>

@if (Inventarios == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-grow text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (Inventarios.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron artículos.</text>
    </div>
}
else
{
    <MudTable Items="@Inventarios" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Inventario, bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Artículos</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar articulos..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>

            <MudTh Class="thead-dark">Nombre</MudTh>
            <MudTh>Marca</MudTh>
            <MudTh>Precio Compra</MudTh>
            <MudTh>Precio Venta</MudTh>
            <MudTh>Stock</MudTh>

        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nombre">@context.Articulo.Nombre</MudTd>
            <MudTd DataLabel="Marca">@context.Articulo.Marca</MudTd>
            <MudTd DataLabel="Precio Compra">C$ @Math.Round(@context.Articulo.PrecioCompra, 2)</MudTd>
            <MudTd DataLabel="Precio Venta"> C$ @Math.Round(@context.Articulo.PrecioVenta, 2)</MudTd>
            <MudTd DataLabel="Existencia">@context.Existencia</MudTd>


        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private Inventario selectedItem1 = null;
    private string searchString1 = "";
    private string NombreArtFiltro = String.Empty; //filtros

    public List<Inventario> Inventarios { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        var httpResponse = await Http.GetAsync($"api/inventarios/Cargar");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            Inventarios = JsonSerializer.Deserialize<List<Inventario>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }

    }

    private async Task BorrarInventario(Inventario inventario)
    {
        var responseHttp = await repositorio.Delete($"api/inventarios/{inventario.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }

    ///Buscar por nombre
    private bool FilterFunc1(Inventario element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Inventario element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Articulo.Nombre.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Articulo.Marca.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        return false;
    }


}