@page "/compras"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes

<h3>Compras</h3>

<div class="form-group">
    <a class="btn btn-info" href="compras/crear">Agregar Compras</a>
</div>

<ListadoGenerico Listado="ComprasRealizadas">
    <HayRegistrosCompleto>
        
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Acciones</th>
                    <th>N° Factura</th>
                    <th>Fecha</th>
                    <th>Proveedor</th>
                    <th>Impuesto</th>
                    <th>Subtotal</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Compra compraRealizada in ComprasRealizadas)
                {
                    <tr>
                        <td>
                            <a href="/compras/editar/@compraRealizada.Id" class="btn btn-success">Editar</a>
                            <button @onclick="@(() => BorrarCompra(compraRealizada))" class="btn btn-danger">Borrar</button>
                        </td>
                        <td>@compraRealizada.NFactura</td>
                        <td>@compraRealizada.Fecha.ToShortDateString()</td>
                        <td>@compraRealizada.Proveedor.NombreEmpresa</td>
                        <td>$ @Math.Round(compraRealizada.IVA, 2)</td>
                        <td>$ @Math.Round(compraRealizada.SubTotal, 2)</td>
                        <td>$ @Math.Round(compraRealizada.CostoTotal, 2)</td>
                    </tr>
                 }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

@*Paginaccion*@
<Paginaciones PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada"
              PaginasTotales="paginasTotales"></Paginaciones>


@code {

    //Paginacion
    private int paginaActual = 1;
    private int paginasTotales;

    public List<Proveedor> Proveedores { get; set; } = new List<Proveedor>();
    //variablesD
    public List<Compra> ComprasRealizadas = new List<Compra>();

    protected async override Task OnInitializedAsync()
    {
        //extraccion de datos al iniciar la pagina
        await getComprasRealizadas();
    }
    private async Task getComprasRealizadas()
    {
        var responseHttp = await repositorio.Get<List<Compra>>("api/compras/cargartodo");
        ComprasRealizadas = responseHttp.Response;

    }

    private async Task BorrarCompra(Compra compra)
    {
        var responseHttp = await repositorio.Delete($"api/compras/{compra.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await getComprasRealizadas();
        }

    }

    //Paginacion
    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }
    private async Task Cargar(int pagina = 1)
    {
        var responseHttp = await repositorio.Get<List<Compra>>($"api/compras?pagina={pagina}");
        if (!responseHttp.Error)
        {
            ComprasRealizadas = responseHttp.Response;
            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }
}