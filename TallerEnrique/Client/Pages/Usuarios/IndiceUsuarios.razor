@page "/usuarios"
@page "/auth"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes

<h3>Usuarios</h3>



<ListadoGenerico Listado="Usuarios">
    <HayRegistrosCompleto>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                   <th>Nombre</th>
                    <th>Apellido</th>
                    <th>E-Mail</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var usuario in Usuarios)
                {
                    <tr>
                        <td>
                            <a href="/usuarios/editar/@usuario.UserId" class="btn btn-success">Asignar Rol</a>
                            <button @onclick="@(() => BorrarUsuario(usuario))" class="btn btn-danger">Borrar</button>
                        </td>
                        <td>@usuario.UserName</td>
                        <td>@usuario.UserLastName</td>
                        <td>@usuario.Email</td>

                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>
@*<Paginaciones PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada"
              PaginasTotales="paginasTotales"></Paginaciones>*@

@code {
    List<UsuarioDTO> Usuarios;

    //private int paginaActual = 1;
    //private int paginasTotales;

    //private async Task paginaSeleccionada(int pagina)
    //{
    //    paginaActual = pagina;
    //    await Cargar(pagina);
    //}

    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<List<UsuarioDTO>>("api/usuarios");
        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            Usuarios = httpResponse.Response;
        }
        //await Cargar();
    }
    //Eliminando un Usuario
    private async Task Cargar()
    {
        var responseHttp = await repositorio.Get<List<UsuarioDTO>>("api/usuarios");
        Usuarios = responseHttp.Response;
    }

    private async Task BorrarUsuario(UsuarioDTO usuario)
    {
        var responseHttp = await repositorio.Delete($"api/usuarios/{usuario.UserId}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }

    //private async Task Cargar()
    //{
    //    var responseHttp = await repositorio.Get<List<UsuarioDTO>>("api/usuarios");
    //    Usuarios = responseHttp.Response;
    //}

    //private async Task Cargar(int pagina = 1)
    //{
    //    var httpResponse = await repositorio.Get<List<UsuarioDTO>>($"api/usuarios?pagina={pagina}");

    //    if (httpResponse.Error)
    //    {
    //        await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
    //    }
    //    else
    //    {
    //        //paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
    //        Usuarios = httpResponse.Response;
    //    }
}

