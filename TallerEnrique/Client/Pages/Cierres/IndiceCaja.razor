@page "/cierres"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json
@inject IJSRuntime JS
@using System.Globalization;
@attribute [Authorize(Roles = "admin")]

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

@if (caja == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (caja.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontró ningun registro.</text>
    </div>
}
else
{

    @*<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudTooltip Text="Exportar a excel" Color="Color.Tertiary" Placement="Placement.Bottom" Arrow="true">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel"
                       @onclick="ExportarExcel"
                       Color="Color.Warning">Excel</MudButton>
        </MudTooltip>
    </MudButtonGroup>*@

    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true" Filter="new Func<Cierre, bool>(FilterFunc1)"
              Items="@caja"
              Virtualize="@_virtualize"
              GroupBy="@grupo"
              GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
              GroupFooterClass="mb-4"
              Dense="_dense"
              MultiSelection="_multiSelect">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Cierre de Caja</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar por fecha" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <ColGroup>
            @if (_multiSelect)
                {
                <col style="width: 60px;" />
                }
            @if (grupo.Expandable)
                {
                <col style="width: 60px;" />
                }
            <col />
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            
            <MudTh>Fecha</MudTh>
            <MudTh>Entrada</MudTh>
            <MudTh>Salida</MudTh>
            <MudTh>Saldo</MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            
            <MudTd DataLabel="Fecha">@context.Fecha.ToShortDateString()</MudTd>
            <MudTd DataLabel="Entrada">C$ @context.Ingresos.ToString("##,#.##")</MudTd>
            <MudTd DataLabel="Salida">C$ @context.Egresos.ToString("##,#.##")</MudTd>
            @if (context.Saldo < 0)
                {
                <MudTd Style="color:red" DataLabel="Saldo">C$ @context.Saldo.ToString("##,#.##")</MudTd>
                }
                else
                {
                <MudTd DataLabel="Saldo">C$ @context.Saldo.ToString("##,#.##")</MudTd>
                }
            <MudTd>
                @if (context.IdVenta != 0)
                    {
                    <MudButton @onclick="@(() => NavigationManager.NavigateTo($"/ver-ventadetalle/{context.IdVenta}"))"
                               Variant="Variant.Outlined" Color="Color.Success" EndIcon="@Icons.Filled.Payments">Ver venta</MudButton>
                    }
                @if (context.IdCompra != 0)
                    {
                    <MudButton @onclick="@(() => NavigationManager.NavigateTo($"/ver-compradetalle/{context.IdCompra}"))"
                               Variant="Variant.Outlined" Color="Color.Success" EndIcon="@Icons.Filled.Payments">Ver compra</MudButton>
                    }
            </MudTd>
        </RowTemplate>
        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">
                <b>Total ingresos:</b>C$ @context.Items.Sum((e) => e.Ingresos).ToString("##,#.##")<br />
                <b>Total Egresos:</b>C$ @context.Items.Sum((e) => e.Egresos).ToString("##,#.##")<br />
                @*<b>Total Saldo:</b>C$ @context.Items.Sum((e) => e.Saldo)*@
                <b>Total Saldo:</b>C$ @context.Items.OrderByDescending(x => x.Fecha).FirstOrDefault().Saldo.ToString("##,#.##")
            </MudTh>

        </GroupFooterTemplate>

    </MudTable>

    @*<MudSwitch @bind-Checked="_dense" Color="Color.Primary">Dense</MudSwitch>
        <MudSwitch @bind-Checked="_multiSelect" Color="Color.Primary">MultiSelect</MudSwitch>
        <MudSwitch @bind-Checked="_virtualize" Color="Color.Primary">Virtualize</MudSwitch>
        <MudSwitch @bind-Checked="grupo.Indentation" Color="Color.Primary">Indentation</MudSwitch>
        <MudSwitch @bind-Checked="grupo.Expandable" Color="Color.Primary">Expandable</MudSwitch>*@
}

@code {
    private DateTime FechaFiltro = DateTime.Today;
    public List<Cierre> caja { get; set; }

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Cierre selectedItem1 = null;
    private HashSet<Cierre> selectedItems = new HashSet<Cierre>();

    public int idventa { get; set; }


    protected override async Task OnInitializedAsync()
    {

        await CargarCaja();

    }

    async Task CargarCaja()
    {
        string fecha = Convert.ToString(FechaFiltro);

        var httpResponse = await Http.GetAsync($"api/cierres");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            caja = JsonSerializer.Deserialize<List<Cierre>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Error cargando datos de caja");
        }
    }

    // esta es la funcion de filtrado de MudBlazor
    private bool FilterFunc1(Cierre element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Cierre element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Fecha.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    ///nueva tabla para sumar
    private bool _dense = false;
    private bool _multiSelect = false;
    private bool _virtualize = false;

    private TableGroupDefinition<Cierre> grupo = new()
    {
        GroupName = "Fecha",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Fecha.ToShortDateString()
    };

   // private IEnumerable<Cierre> Cierres = new List<Cierre>();

    //protected override async Task OnInitializedAsync()
    //{
    //    Cierres = await Http.GetFromJsonAsync<List<Cierre>>("webapi/periodictable");
    //}
    private void ExportarExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("cierre");
            worksheet.Cells["A1"].Value = "Taller Enrique Peña.";
            using (ExcelRange r = worksheet.Cells["A1:E1"])
            {
                r.Merge = true; r.Style.Font.Bold = true;
                r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                worksheet.DefaultColWidth = 60;
                r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                r.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);
            }
            worksheet.Cells["A2"].Value = $"Salidas / Entradas de dinero en caja {DateTime.Now.ToLongTimeString()}";
            using (ExcelRange r = worksheet.Cells["A2:E2"])
            {
                r.Merge = true;
                r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                worksheet.DefaultColWidth = 60;
                r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                r.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightYellow);
            }

            var tableBody = worksheet.Cells["A3:D3"].LoadFromCollection(
    from f in caja
    select new { f.Id, f.Fecha, f.Ingresos, f.Egresos, f.Saldo }, true);

            var header = worksheet.Cells["A3:E3"];
            worksheet.DefaultColWidth = 32;
            tableBody.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;

            //  esto afectal cuerpo

            tableBody.Style.Fill.PatternType = ExcelFillStyle.None;
            // bordes
            tableBody.Style.Border.BorderAround(ExcelBorderStyle.Hair);
            worksheet.Cells.Style.Border.BorderAround(ExcelBorderStyle.Hair);

            // fuentes
            header.Style.Font.Bold = true;
            header.Style.Font.Color.SetColor(System.Drawing.Color.Black);

            // Este es el encabezado.
            header.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            header.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightBlue);

            JS.GuardarComo($"Informe_EntradasSalidas_{DateTime.Now.ToShortDateString()}.xlsx", package.GetAsByteArray());
        }
    }
}


