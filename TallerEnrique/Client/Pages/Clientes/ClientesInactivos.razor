@page "/clientes/inactivos"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject HttpClient Http
@using System.Text.Json
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "admin, vendedor")]




@if (Clientes == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-grow text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (Clientes.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron clientes.</text>
    </div>
}
else
{
    <MudTable Items="@Clientes" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Cliente, bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Clientes</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar clientes..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>

            <MudTh Class="thead-dark">Nombres</MudTh>
            <MudTh>Apellidos</MudTh>
            <MudTh>Ciudad</MudTh>
            <MudTh>Departamento</MudTh>
            <MudTh>Teléfono</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nombres">@context.Nombres</MudTd>
            <MudTd DataLabel="Apellidos">@context.Apellidos</MudTd>
            <MudTd DataLabel="Ciudad">@context.Ciudad</MudTd>
            <MudTd DataLabel="Departamento">@context.Departamento</MudTd>
            <MudTd DataLabel="Telefono">@context.Telefono</MudTd>
            <MudTd>
                <MudTooltip Text="Editar Cliente."
                            Color="Color.Secondary" Placement="Placement.Top">
                    <MudFab Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Edit" Size="MudBlazor.Size.Small"
                            @onclick="@(() => NavigationManager.NavigateTo($"/clientes/editar/{context.Id}"))" />
                </MudTooltip>
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {


    private bool dense = false;
private bool hover = true;
private bool striped = true;
private bool bordered = true;
private Cliente selectedItem1 = null;
private string searchString1 = "";
private string NombreArtFiltro = String.Empty; //filtros


public List<Cliente> Clientes { get; set; }
protected async override Task OnInitializedAsync()
{
    await Cargar();
}

private async Task Cargar()
{
    var httpResponse = await Http.GetAsync($"api/clientes/clientesinactivos");
    if (httpResponse.IsSuccessStatusCode)
    {
        var responseString = await httpResponse.Content.ReadAsStringAsync();
        Clientes = JsonSerializer.Deserialize<List<Cliente>>(responseString,
            new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
    }
    else
    {
        Console.WriteLine("error");
    }

}

private async Task BorrarCliente(Cliente clientes)
{
    var responseHttp = await repositorio.Delete($"api/clientes/{clientes.Id}");
    if (responseHttp.Error)
    {
        await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
    }
    else
    {
        await Cargar();
    }

}



///Buscar por nombre
private bool FilterFunc1(Cliente element) => FilterFunc(element, searchString1);

private bool FilterFunc(Cliente element, string searchString)
{
    if (string.IsNullOrWhiteSpace(searchString))
        return true;
    if (element.Nombres.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
    if (element.Apellidos.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
    if (element.Ciudad.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
    if (element.Departamento.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;
    if (element.Telefono.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
        return true;

    return false;
}


}
