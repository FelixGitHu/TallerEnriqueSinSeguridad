@page "/Registro"

@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IMostrarMensajes mostrarMensajes

@using TallerEnrique.Client.Auth

@*<h3>Registro</h3>*@

<EditForm Model="@userInfo" OnValidSubmit="CrearUsuario">
    <DataAnnotationsValidator />
    <div class="text-center">

        <div class="p-5 bg-image" style="background-image: url('https://mdbootstrap.com/img/new/textures/full/108.jpg');height: 300px;"></div>

        <div class="card mx-4 mx-md-5 shadow-5-strong" style="margin-top: -100px; background: hsla(0, 0%, 100%, 0.8);backdrop-filter: blur(30px);">
            <div class="card-body py-5 px-md-5">

                <div class="row d-flex justify-content-center">
                    <div class="col-lg-6">
                        <h2 class="fw-bold mb-5">Registrarse ahora</h2>
                        <form>
                            

                            <div class="form-outline mb-4">
                                <label class="form-label" for="form3Example3">Email </label>
                                <InputText Class="form-control" @bind-Value="@userInfo.Email" placeholder="Ingrese una dirección de correo" />
                                <ValidationMessage For="@(() => userInfo.Email)" />

                            </div>

                            <div class="form-outline mb-4">
                                <label class="form-label" for="form3Example4">Contraseña</label>
                                <InputPassword Class="form-control" @bind-Value="@userInfo.Password" />
                                <ValidationMessage For="@(() => userInfo.Password)" />

                            </div>

                        </form>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary ">Registrarse</button>
                <a href="Login" class="btn btn-primary">Iniciar Sesión</a>
            </div>
        </div>
        
    </div>
    
</EditForm>

@code {
    private UserInfo userInfo = new UserInfo();

    private async Task CrearUsuario()
    {
        var httpResponse = await repositorio.Post<UserInfo, UserToken>("api/cuentas/crear", userInfo);

        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError("Error al crear el nuevo usuario");
        }
        else
        {
            //await loginService.Login(httpResponse.Response);

            await mostrarMensajes.MostrarMensajeExitoso("Usuario creado exitosamente ");
            navigationManager.NavigateTo("/login");
        }
    }
}
