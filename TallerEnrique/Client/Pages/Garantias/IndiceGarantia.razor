@page "/garantias"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes

<h3>Garantias</h3>

<div class="form-group">
    <a class="btn btn-info" href="garantias/crear">Agregar garantia</a>
</div>

<ListadoGenerico Listado="Garantias">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr >
                    <th>Acción</th>
                    <th>Tiempo de la Garantia en Semanas</th>
                    <th>Políticas de Garantía</th>
                    
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Garantias)
                {
                <tr>
                    <td class="col-sm-2">
                        <a href="/garantias/editar/@item.Id" class="btn btn-success">Editar</a>
                        <button @onclick="@(() => BorrarGarantia(item))" class="btn btn-danger">Borrar</button>
                    </td>
                    <td>@item.TiempoGarantia</td>
                    <td>@item.Politicas</td>

                </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

@code {
    public List<Garantia> Garantias { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task Cargar()
    {
        var responseHttp = await repositorio.Get<List<Garantia>>("api/garantias");
        Garantias = responseHttp.Response;
    }

    private async Task BorrarGarantia(Garantia garantia)
    {
        var responseHttp = await repositorio.Delete($"api/garantias/{garantia.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }
}