@inject IRepositorio repositorio
@using System.Linq

<EditForm Model="NuevaCompra" OnValidSubmit="@(()=>enviarCompra())">
    <DataAnnotationsValidator />
    <div class="card">
        <div class=" card-header">
            Compras
        </div>
        <div class="card-body">
            
            <div class="row">
                <div class="form-group col-sm-4">
                    <label>N° Factura:</label>
                    <div>
                        <InputNumber class="form-control" @bind-Value="@NuevaCompra.NFactura" readonly="readonly"/>
                        <ValidationMessage For="@(() => NuevaCompra.NFactura)" />
                    </div>
                </div>
                <div class="form-group col-sm-4">
                    <label>Fecha de Compra:</label>
                    <div>
                        <InputDate class="form-control" @bind-Value="@NuevaCompra.Fecha" />
                        <ValidationMessage For="@(() => NuevaCompra.Fecha)" />
                    </div>
                </div>
                <div class="form-group col-sm-4">
                    <label>Proveedor:</label>
                    <div>
                        <InputSelect required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-control" @bind-Value="NuevaCompra.ProveedorId">
                            <option selected value="">--Proveedor--</option>
                            @foreach (var item in ProveedoresSeleccionados)
                            {
                                <option value="@item.Id"> EMPRESA:  @item.NombreEmpresa  || CONTACTO: @item.NombreContacto</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NuevaCompra.ProveedorId)" />
                    </div>
                </div>
            </div>
            <div class=" row">
                <div class="form-group col-sm-4">
                    <label>SubTotal:</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                        </div>
                        <InputNumber class="form-control" @bind-Value="@NuevaCompra.SubTotal" readonly="readonly" />
                        @*<ValidationMessage For="@(() => NuevaCompra.SubTotal)" />*@
                    </div>
                </div>
                <div class="form-group col-sm-4">
                    <label>I.V.A:</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                        </div>
                        <InputNumber class="form-control" @bind-Value="@NuevaCompra.IVA" readonly="readonly" />
                        <ValidationMessage For="@(() => NuevaCompra.IVA)" />
                    </div>
                </div>
                <div class="form-group col-sm-4">
                    <label>Total:</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                        </div>
                        <InputNumber @onclick="@(() => CalcularTotal())" class="form-control" @bind-Value="@NuevaCompra.CostoTotal" readonly="readonly" />
                        <ValidationMessage For="@(() => NuevaCompra.CostoTotal)" />
                    </div>
                </div>
            </div>
            @*Nuevo formulario*@

            <div class="container">
                <div class="row">
                    <div class="col-6">
                        <button type="button" class="btn btn-secondary"
                                @onclick="@(() => NuevaCompra.DCompras.Add(new DCompra()))">
                            Agregar Detalles
                        </button>
                        @*<button @onclick="@(() => CalcularTotal())" type="button" class="btn btn-secondary">
                            Calcular Total
                        </button>*@
                        <hr />
                    </div>
                    <div class="col-6">
                        <a href="compras" class="btn btn-success">Volver</a>
                        <button class="btn btn-success" type="submit">Guardar Compra</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar Compra</button>
                        <hr />
                    </div>
                </div>
                @for (var i = 0; i < NuevaCompra.DCompras.Count; i++)
                {
                    var indice = i;
                    var detalle = NuevaCompra.DCompras[i];
                    articulosComprados = NuevaCompra.DCompras;

                    <h5>Detalles del producto @(i + 1)</h5>
                    <div class="row">
                        <div class="form-group col-sm-6">
                            <label>Productos:</label>
                            <InputSelect required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-control" @bind-Value="detalle.ArticuloId">
                                <option selected value=""> --- Seleccione un producto ---</option>
                                @foreach (var item in ProductosSeleccionados)
                                    {
                            <option value="@item.Id">@item.Nombre => @item.Descripcion</option>
                                    }
                            </InputSelect>
                            <ValidationMessage For="@(() => detalle.ArticuloId)" />
                            @*para validar que sea un Id*@
                        </div>


                        <div class="form-group col-sm-6">
                            <label>Cantidad:</label>
                            <div>
                                <InputNumber class="form-control" @bind-Value="@detalle.Cantidad" />
                                <ValidationMessage For="@(() => detalle.Cantidad)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-sm-6">
                            <label>Precio de Compra:</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                                </div>
                                <InputNumber class="form-control" @bind-Value="@detalle.PrecioUnitario" />
                                <ValidationMessage For="@(() => detalle.PrecioUnitario)" />
                            </div>
                        </div>
                        <div class="form-group col-sm-6">
                            <label>Descuento:</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="inputGroup-sizing-default">%</span>
                                </div>
                                <InputNumber class="form-control" @bind-Value="@detalle.Descuento" />
                                <ValidationMessage For="@(() => detalle.Descuento)" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <button type="button" class="btn btn-danger btn-sm"
                                @onclick="@(() => NuevaCompra.DCompras.RemoveAt(indice))">
                            Eliminar
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

</EditForm>

@code {
    [Parameter] public Compra NuevaCompra { get; set; } = new Compra();

    //probando si guarda los datos

    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Proveedor> ProveedoresSeleccionados { get; set; } = new List<Proveedor>();
    [Parameter] public List<Articulo> ProductosSeleccionados { get; set; } = new List<Articulo>();
    private Articulo Articulo = new Articulo();
    private List<Articulo> ListArticulos = new List<Articulo>();

    //variablesD
    private List<Articulo> articulosDisponibles = new List<Articulo>();
    public List<DCompra> articulosComprados { get; set; } = new List<DCompra>();

    //decimal subTotal;

    string valorSelect = "";

    protected override async Task OnInitializedAsync()
    {
        await ObtenerProductos();
        await ObtenerProveedores();

        //extraer los articulos disponibles para comprar
        await GetArticulosDisponibles();
        //instancia de lista dcompra
        NuevaCompra.DCompras = new List<DCompra>();
    }

    public async Task GetArticulosDisponibles()
    {
        var httpResponse = await repositorio.Get<List<Articulo>>("api/articulos/cargartodos");
        articulosDisponibles = httpResponse.Response;
    }

    public async Task addDCompra(DCompra ArticuloNuevo)
    {
        NuevaCompra.DCompras.Add(ArticuloNuevo);
        articulosDisponibles.Remove(ArticuloNuevo.Articulo);
    }

    public async Task removeDCompra(Articulo remArti)
    {
        NuevaCompra.DCompras.RemoveAll(x => x.Articulo == remArti);
        articulosDisponibles.Add(remArti);
    }


    decimal CalcularTotal()
    {
        NuevaCompra.CostoTotal += NuevaCompra.SubTotal + NuevaCompra.IVA;
        return NuevaCompra.CostoTotal;
    }


    public void enviarCompra()
    {
        //NuevaCompra.DCompras = articulosComprados;
        CalcularTotal();
        OnValidSubmit.InvokeAsync();
    }




    private void Cancelar()
    {
        NuevaCompra = new Compra();
    }

    private async Task ObtenerProveedores()
    {
        var httpResponse = await repositorio.Get<List<Proveedor>>("api/proveedores/cargartodos");
        ProveedoresSeleccionados = httpResponse.Response;
    }


    private async Task ObtenerProductos()
    {
        var httpResponse = await repositorio.Get<List<Articulo>>("api/articulos/cargartodos");
        ProductosSeleccionados = httpResponse.Response;
    }
    private async Task<IEnumerable<Articulo>> BuscarProductos(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Articulo>>($"api/articulos/buscar/{searchText}"); //aqui busca el método "buscar" en el controlador de producto
        return responseHttp.Response;
    }

    //No se para que es esto
    void OnChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        Console.WriteLine($"Value changed to {str}");
    }

}
