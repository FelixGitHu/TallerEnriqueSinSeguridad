@inject IRepositorio repositorio
@using System.Linq

<EditForm Model="NuevaVenta" OnValidSubmit="@(()=>enviarVenta())">
    <DataAnnotationsValidator />
    <div class="card">
        <div class=" card-header">
            Ventas
        </div>
        <div class="card-body">
            
            <div class="row">
                <div class="form-group col-sm-4">
                    <label>N° Factura:</label>
                    <div>
                        <InputNumber class="form-control" @bind-Value="@NuevaVenta.NFactura" readonly="readonly" />
                        <ValidationMessage For="@(() => NuevaVenta.NFactura)" />
                    </div>
                </div>
                <div class="form-group col-sm-4">
                    <label>Cliente:</label>
                    <div>
                        <InputSelect required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-control" @bind-Value="NuevaVenta.ClienteId">
                            <option selected value="">--Seleccione un Cliente--</option>
                            @foreach (var item in ClienteSeleccionados)
                            {
                                <option value="@item.Id">@item.Nombres &nbsp; @item.Apellidos</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NuevaVenta.ClienteId)" />
                    </div>
                </div>
                <div class="form-group col-sm-4">
                    <label>Fecha:</label>
                    <div>
                        <InputDate class="form-control" @bind-Value="@NuevaVenta.Fecha" />
                        <ValidationMessage For="@(() => NuevaVenta.Fecha)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="form-group col-sm-12">
                    <label>Descripción:</label>
                    <div>
                        <InputTextArea class="form-control" @bind-Value="@NuevaVenta.Descripcion" />
                        <ValidationMessage For="@(() => NuevaVenta.Descripcion)" />
                    </div>
                </div>
            </div>
            <div class=" row">
                <div class="form-group col-sm-4">
                    <label>Descuento por Venta:</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">%</span>
                        </div>
                        <InputNumber class="form-control" @bind-Value="@NuevaVenta.Descuento" />
                        <ValidationMessage For="@(() => NuevaVenta.Descuento)" />
                    </div>
                </div>
                <div class="form-group col-sm-4">
                    <label>Mano de Obra:</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                        </div>
                        <InputNumber class="form-control" @bind-Value="@NuevaVenta.ManoObra" />
                        <ValidationMessage For="@(() => NuevaVenta.ManoObra)" />
                    </div>
                </div>
                <div class="form-group col-sm-4">
                    <label>Mecanico a Cargo:</label>
                    <div>
                        <InputSelect required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-control" @bind-Value="NuevaVenta.MecanicoId">
                            <option selected value="">--Seleccione un Mecanico--</option>
                            @foreach (var item in MecanicoSeleccionados)
                            {
                                <option value="@item.Id">@item.Nombre </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NuevaVenta.MecanicoId)" />
                    </div>
                </div>
            </div>
            <div class=" row">
                <div class="form-group col-sm-8">
                    <label>Vehiculo:</label>
                    <div>
                        <InputSelect required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-control" @bind-Value="NuevaVenta.VehiculoId">
                            <option selected value="">--Seleccione un Auto--</option>
                            @foreach (var item in VehiculoSeleccionados)
                            {
                                if (NuevaVenta.ClienteId == item.ClienteId)
                                {
                                    <option value="@item.Id"> PLACA: @item.Placa &nbsp; COLOR: @item.Color &nbsp; MARCA: @item.Marca</option>
                                }

                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NuevaVenta.VehiculoId)" />
                    </div>
                </div>


                
                @*<div class="form-group col-sm-4">
            <label>Forma de Pago:</label>
            <div>
                <InputSelect required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-control" @bind-Value="NuevaVenta.MonedaId">
                    <option selected value="">--Moneda--</option>
                    @foreach (var item in MonedaSeleccionados)
                    {
                        <option value="@item.Id">@item.TipoMoneda</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => NuevaVenta.MonedaId)" />
            </div>
        </div>*@
                <div class="form-group col-sm-4">
                    <label>Categoria:</label>
                    <div>
                        <InputSelect required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-control" @bind-Value="NuevaVenta.CategoriaId">
                            <option selected value="">--Seleccione una Categoria--</option>
                            @foreach (var item in CategoriaSeleccionados)
                            {
                                <option value="@item.Id">@item.Nombre </option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NuevaVenta.CategoriaId)" />
                    </div>
                </div>
            </div>
            
            <div class=" row">
                <div class="form-group col-sm-6">
                    <label>Servicio:</label>
                    <div>
                        <InputSelect required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-control" @bind-Value="NuevaVenta.ServicioId">
                            <option selected value="">--Servicio--</option>
                            @foreach (var item in ServicioSeleccionados)
                            {
                                if (NuevaVenta.CategoriaId == item.CategoriaId)
                                {
                                <option value="@item.Id">@item.Descripcion</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => NuevaVenta.ServicioId)" />
                    </div>
                </div>
                <div class="form-group col-sm-2">
                    <label>IVA:</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                        </div>
                        <InputNumber class="form-control" @bind-Value="@NuevaVenta.IVA" readonly="readonly" />
                        <ValidationMessage For="@(() => NuevaVenta.IVA)" />
                    </div>
                </div>
                <div class="form-group col-sm-2">
                    <label>SubTotal:</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                        </div>
                        <InputNumber class="form-control" @bind-Value="@NuevaVenta.SubTotal" readonly="readonly" />
                        <ValidationMessage For="@(() => NuevaVenta.SubTotal)" />
                    </div>
                </div>
                <div class="form-group col-sm-2">
                    <label>Total:</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                        </div>
                        <InputNumber class="form-control" @onclick="@(() => CalcularTotal())" @bind-Value="@NuevaVenta.Total" readonly="readonly" />
                        <ValidationMessage For="@(() => NuevaVenta.Total)" />
                    </div>
                </div>
            </div>

            @*Nuevo formulario*@

        <div class="container">
            <div class="row">
                <div class="col-6">
                    <button type="button" class="btn btn-secondary"
                            @onclick="@(() => NuevaVenta.DVentas.Add(new DVenta()))">
                        Agregar Detalles
                    </button>
                    @*<button @onclick="@(() => CalcularTotal())" type="button" class="btn btn-secondary">
                    Calcular Total
                </button>*@
                    <hr />
                </div>
                <div class="col-6">
                    <a href="ventas" class="btn btn-success">Volver</a>
                    <button class="btn btn-success" type="submit">Guardar Venta</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar Venta</button>
                    <hr />
                </div>
            </div>


            @for (var i = 0; i < NuevaVenta.DVentas.Count; i++)
            {
                var indice = i;
                var detalle = NuevaVenta.DVentas[i];
                articulosVendidos = NuevaVenta.DVentas;

                <h5>Detalles del producto @(i + 1)</h5>
                <div class="row">
                    <div class="form-group col-sm-12">
                        <label>Productos:</label>
                        <InputSelect required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-control" @bind-Value="detalle.InventarioId">
                            <option selected value=""> --- Seleccione un producto ---</option>
                            @foreach (var item in InventarioSeleccionado)
                                {
                                    if (item.Existencia > 0)
                                    {
                                    <option value="@item.Id">@item.Articulo.Nombre  |  C$ @Math.Round(@item.Articulo.PrecioVenta, 2)  |  STOCK: @item.Existencia  |  Marca: @item.Articulo.Marca</option>
                                    }

                                }
                        </InputSelect>
                        <ValidationMessage For="@(() => detalle.InventarioId)" />
                        @*para validar que sea un Id*@
                    </div>
                </div>
                @foreach (var inv in InventarioSeleccionado)
                {
                    if (detalle.InventarioId == inv.ArticuloId)
                    {
                        
                        detalle.PrecioVenta = inv.Articulo.PrecioVenta;
                    }
                }
                <div class="row">
                    <div required oninvalid="this.setCustomValidity('Por favor selecciona una opción')" class="form-group col-sm-6">
                        <label>Cantidad:</label>
                        <div>
                            <InputNumber class="form-control" @bind-Value="@detalle.Cantidad" />
                            <ValidationMessage For="@(() => detalle.Cantidad)" />
                        </div>
                    </div>
                    @*<div class="form-group col-sm-6">
                    <label>Precio:</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-default">C$</span>
                        </div>
                        <InputNumber class="form-control" @bind-Value="@detalle.PrecioVenta" />
                        <ValidationMessage For="@(() => detalle.PrecioVenta)" />
                    </div>
                </div>*@
                    <div class="form-group col-sm-6">
                        <label>Descuento:</label>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroup-sizing-default">%</span>
                            </div>
                            <InputNumber class="form-control" @bind-Value="@detalle.Descuento" />
                            <ValidationMessage For="@(() => detalle.Descuento)" />
                        </div>
                    </div>

                </div>

                <div class="row">
                    <button type="button" class="btn btn-danger btn-sm"
                            @onclick="@(() => NuevaVenta.DVentas.RemoveAt(indice))">
                        Eliminar
                    </button>
                </div>
            }
        </div>

        </div>
    </div>

</EditForm>

@code {
    [Parameter] public Venta NuevaVenta { get; set; } = new Venta();

    //probando si guarda los datos

    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Vehiculo> VehiculoSeleccionados { get; set; } = new List<Vehiculo>();
    [Parameter] public List<Cliente> ClienteSeleccionados { get; set; } = new List<Cliente>();
    [Parameter] public List<Moneda> MonedaSeleccionados { get; set; } = new List<Moneda>();
    [Parameter] public List<Mecanico> MecanicoSeleccionados { get; set; } = new List<Mecanico>();
    [Parameter] public List<Servicio> ServicioSeleccionados { get; set; } = new List<Servicio>();
    [Parameter] public List<Categoria> CategoriaSeleccionados { get; set; } = new List<Categoria>();
    //esta lista ya no la estoy usando por que estoy mandando a llamar al inentario
    [Parameter] public List<Articulo> ProductosSeleccionados { get; set; } = new List<Articulo>();
    /// </summary>
    [Parameter] public List<Inventario> InventarioSeleccionado { get; set; } = new List<Inventario>();


    /// <summary>

    private Articulo Articulo = new Articulo();
    /// <summary>
    /// //
    /// </summary>
    private Inventario Inventario = new Inventario();
    private List<Articulo> ListArticulos = new List<Articulo>();

    //variablesD
    private List<Articulo> articulosDisponibles = new List<Articulo>();
    private List<DVenta> articulosVendidos { get; set; } = new List<DVenta>();

    decimal subTotal;

    string valorSelect = "";

    protected override async Task OnInitializedAsync()
    {
        await ObtenerProductos();
        await ObtenerVehiculos();
        await ObtenerMonedas();
        await ObtenerMecanicos();
        await ObtenerServicios();
        await ObtenerCategorias();
        await ObtenerInventario();
        await ObtenerCliente();


        NuevaVenta.DVentas = new List<DVenta>();
    }

    public async Task GetArticulosDisponibles()
    {
        var httpResponse = await repositorio.Get<List<Articulo>>("api/articulos/cargartodos");
        articulosDisponibles = httpResponse.Response;
    }



    public void calcularSubtotal()
    {
        subTotal = (decimal)articulosVendidos.Select(x => (x.PrecioVenta * x.Cantidad) - ((x.PrecioVenta * x.Cantidad)) * (x.Descuento / 100)).Sum();

    }
    decimal CalcularTotal()
    {
        NuevaVenta.Total += NuevaVenta.SubTotal + NuevaVenta.IVA + NuevaVenta.ManoObra;
        return NuevaVenta.Total;
    }

    public void enviarVenta()
    {
        //NuevaCompra.DCompras = articulosComprados;
        CalcularTotal();
        OnValidSubmit.InvokeAsync();
    }


    private void Cancelar()
    {
        NuevaVenta = new Venta();
    }

    private async Task ObtenerVehiculos()
    {
        var httpResponse = await repositorio.Get<List<Vehiculo>>("api/vehiculos/cargartodos");
        VehiculoSeleccionados = httpResponse.Response;
    }
    private async Task ObtenerMonedas()
    {
        var httpResponse = await repositorio.Get<List<Moneda>>("api/monedas/cargartodos");
        MonedaSeleccionados = httpResponse.Response;
    }
    private async Task ObtenerMecanicos()
    {
        var httpResponse = await repositorio.Get<List<Mecanico>>("api/mecanicos/cargartodos");
        MecanicoSeleccionados = httpResponse.Response;
    }
    private async Task ObtenerServicios()
    {
        var httpResponse = await repositorio.Get<List<Servicio>>("api/servicios/cargartodos");
        ServicioSeleccionados = httpResponse.Response;
    }
    private async Task ObtenerCategorias()
    {
        var httpResponse = await repositorio.Get<List<Categoria>>("api/categorias/cargartodos");
        CategoriaSeleccionados = httpResponse.Response;
    }


    private async Task ObtenerProductos()
    {
        var httpResponse = await repositorio.Get<List<Articulo>>("api/articulos/cargartodos");
        ProductosSeleccionados = httpResponse.Response;
    }
    private async Task<IEnumerable<Articulo>> BuscarProductos(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Articulo>>($"api/articulos/buscar/{searchText}"); //aqui busca el método "buscar" en el controlador de producto
        return responseHttp.Response;
    }

    private async Task ObtenerInventario()
    {
        var httpResponse = await repositorio.Get<List<Inventario>>("api/inventarios/Cargar");
        InventarioSeleccionado = httpResponse.Response;
    }
    private async Task ObtenerCliente()
    {
        var httpResponse = await repositorio.Get<List<Cliente>>("api/clientes/cargartodos");
        ClienteSeleccionados = httpResponse.Response;
    }

    //No se para que es esto
    void OnChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        Console.WriteLine($"Value changed to {str}");
    }

}
































































