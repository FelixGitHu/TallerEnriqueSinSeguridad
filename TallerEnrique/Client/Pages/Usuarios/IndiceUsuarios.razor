@page "/usuarios"
@page "/auth"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject HttpClient Http
@using System.Text.Json
@inject NavigationManager NavigationManager
@*@attribute [Authorize(Roles = "admin")]*@

<div class="form-group">
    <a class="btn btn-info" href="usuarios/crear">Agregar Usuario</a>
</div>

@if (Usuarios == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-grow text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (Usuarios.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron artículos.</text>
    </div>
}
else
{
    <MudTable Items="@Usuarios" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<UsuarioDTO, bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Usuarios</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar Usuario..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>

            <MudTh Class="thead-dark">Nombre</MudTh>
            @*<MudTh>Apellido</MudTh>*@
            <MudTh>E-Mail</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            @*<MudTd DataLabel="Nombre">@context.UserLastName</MudTd>*@
            <MudTd DataLabel="Nombre">@context.UserName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd>
                <MudTooltip Text="Asignar Rol al Usuario."
                            Color="Color.Secondary" Placement="Placement.Top">
                    <MudFab Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Edit" Size="MudBlazor.Size.Small"
                            @onclick="@(() => NavigationManager.NavigateTo($"/usuarios/editar/{context.UserId}"))" />
                </MudTooltip>
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private UsuarioDTO selectedItem1 = null;
    private string searchString1 = "";
    private string NombreArtFiltro = String.Empty; //filtros
    List<UsuarioDTO> Usuarios;




    protected override async Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<List<UsuarioDTO>>("api/usuarios");
        if (httpResponse.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            Usuarios = httpResponse.Response;
        }
        //await Cargar();
    }
    //Eliminando un Usuario
    //private async Task Cargar()
    //{
    //    var responseHttp = await repositorio.Get<List<UsuarioDTO>>("api/usuarios");
    //    Usuarios = responseHttp.Response;
    //}
    private async Task Cargar()
    {
        var httpResponse = await Http.GetAsync($"api/usuarios");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            Usuarios = JsonSerializer.Deserialize<List<UsuarioDTO>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }

    }

    private async Task BorrarUsuario(UsuarioDTO usuario)
    {
        var responseHttp = await repositorio.Delete($"api/usuarios/{usuario.UserId}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }
    ///Buscar por nombre
    private bool FilterFunc1(UsuarioDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(UsuarioDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.UserName.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.UserLastName.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }




}

