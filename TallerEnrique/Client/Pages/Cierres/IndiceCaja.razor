@page "/cierres"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json

<div class="d-flex position-sticky justify-content-between mb-1">

    <div class="input-group" style="width:60%">
        <input class="form-control" type="date" placeholder="Fecha venta" @bind="FechaFiltro" />
        @* <input class="form-control" type="text" placeholder="Nombre empleado" @bind="EmpleadoFiltro" />*@
        <div class="input-group-append">
            <button @onclick="Filtrar" class="btn btn-primary" type="button"><i class="oi oi-magnifying-glass"></i></button>
            <button @onclick="Limpiar" class="btn btn-danger" type="button"><i class="oi oi-delete"></i></button>
        </div>
    </div>
</div>

@if (caja == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-border-sm text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (caja.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontró ningun registro.</text>
    </div>
}
else
{
    <style>
        .mud-table-cell-custom-group {
            font-weight: 500;
        }

        .mud-table-cell-custom-group-footer {
            padding-bottom: 50px;
            text-align: right;
        }
    </style>

    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
              Items="@caja"
              Virtualize="@_virtualize"
              GroupBy="@grupo"
              GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
              GroupFooterClass="mb-4"
              Dense="_dense"
              MultiSelection="_multiSelect">
        <ColGroup>
            @if (_multiSelect)
            {
                <col style="width: 60px;" />
            }
            @if (grupo.Expandable)
            {
                <col style="width: 60px;" />
            }
            <col />
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh>Nr</MudTh>
            <MudTh>Fecha</MudTh>
            <MudTh>Entrada</MudTh>
            <MudTh>Salida</MudTh>
            <MudTh>Saldo</MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Fecha">@context.Fecha.ToShortDateString()</MudTd>
            <MudTd DataLabel="Entrada">C$ @context.Ingresos</MudTd>
            <MudTd DataLabel="Salida">C$ @context.Egresos</MudTd>
            @if (context.Saldo < 0)
                {
                <MudTd Style="color:red" DataLabel="Saldo">C$ @context.Saldo</MudTd>
                }
                else
                {
                <MudTd DataLabel="Saldo">C$ @context.Saldo</MudTd>
                }
        </RowTemplate>
        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="5">
                <b>Total ingresos:</b>C$ @context.Items.Sum((e) => e.Ingresos)<br />                                                                                   
                <b>Total Egresos:</b>C$ @context.Items.Sum((e) => e.Egresos)<br />                                                                               
                <b>Total Saldo:</b>C$ @context.Items.Sum((e) => e.Saldo)
            </MudTh>
            
        </GroupFooterTemplate>
      
    </MudTable>

    <MudSwitch @bind-Checked="_dense" Color="Color.Primary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="_multiSelect" Color="Color.Primary">MultiSelect</MudSwitch>
    <MudSwitch @bind-Checked="_virtualize" Color="Color.Primary">Virtualize</MudSwitch>
    <MudSwitch @bind-Checked="grupo.Indentation" Color="Color.Primary">Indentation</MudSwitch>
    <MudSwitch @bind-Checked="grupo.Expandable" Color="Color.Primary">Expandable</MudSwitch>
}

@code {
    public List<Cierre> caja { get; set; }

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Cierre selectedItem1 = null;
    private HashSet<Cierre> selectedItems = new HashSet<Cierre>();

    private DateTime FechaFiltro = DateTime.Today;


    protected override async Task OnInitializedAsync()
    {

        await CargarCaja();

    }

    async Task CargarCaja()
    {
        string fecha = Convert.ToString(FechaFiltro);

        var httpResponse = await Http.GetAsync($"api/cierres/filtro?fecha={fecha}");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            caja = JsonSerializer.Deserialize<List<Cierre>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("Error en caja");
        }
    }

    private async Task Filtrar()
    {
        await CargarCaja();
    }

    private async Task Limpiar()
    {
        FechaFiltro = DateTime.Today;
        await CargarCaja();
    }

    // esta es la funcion de filtrado de MudBlazor
    private bool FilterFunc1(Cierre element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Cierre element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Fecha.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    ///nueva tabla para sumar
    private bool _dense = false;
    private bool _multiSelect = true;
    private bool _virtualize = false;

    private TableGroupDefinition<Cierre> grupo = new()
    {
        GroupName = "Fecha",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Fecha.ToShortDateString()
    };

    private IEnumerable<Cierre> Cierres = new List<Cierre>();

    //protected override async Task OnInitializedAsync()
    //{
    //    Cierres = await Http.GetFromJsonAsync<List<Cierre>>("webapi/periodictable");
    //}
}


