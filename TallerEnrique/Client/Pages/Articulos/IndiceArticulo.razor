@page "/articulos"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject HttpClient Http
@using System.Text.Json
@inject NavigationManager NavigationManager
@*@attribute [Authorize(Roles ="admin")]*@



<div class="form-group">
    <a class="btn btn-info" href="articulos/crear">Agregar artículo</a>
</div>

@if (Articulos == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-grow text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (Articulos.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron artículos.</text>
    </div>
}
else
{
    <MudTable Items="@Articulos" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Articulo, bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Artículos</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar artículo..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>

            <MudTh Class="thead-dark">Nombre</MudTh>
            <MudTh>Marca</MudTh>
            <MudTh>Precio Compra</MudTh>
            <MudTh>Precio Venta</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nombra">@context.Nombre</MudTd>
            <MudTd DataLabel="Marca">@context.Marca</MudTd>
            <MudTd DataLabel="Precio Compra">C$ @Math.Round(@context.PrecioCompra, 2)</MudTd>
            <MudTd DataLabel="Precio Venta"> C$ @Math.Round(@context.PrecioVenta, 2)</MudTd>
            <MudTd>
                <MudFab Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Edit" Size="MudBlazor.Size.Small"
                        @onclick="@(() => NavigationManager.NavigateTo($"/articulos/editar/{context.Id}"))" />
                <a href="/articulos/editar/@context.Id" class="btn btn-success">Editar</a>
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
<!--<h3>Artículos</h3>

<div class="form-group">
    <a class="btn btn-info" href="articulos/crear">Agregar artículo</a>

        <MudText Typo="Typo.h6">Articulos</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Buscar articulo..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>

</div>

<ListadoGenerico Listado="Articulos">
    <HayRegistrosCompleto>
        <table class="table table-hover">
            <thead>
                <tr>
                    <AuthorizeView Roles="admin">
                        <Authorized>
                            <th>Acción</th>
                        </Authorized>
                    </AuthorizeView>
                    <th>Nombre</th>
                    <th>Marca</th>
                    <th>Precio Compra</th>
                    <th>Precio Venta</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Articulos)
                {
                    <tr>
                        <AuthorizeView Roles="admin">
                            <Authorized>
                                <td>
                                    <a href="/articulos/editar/@item.Id" class="btn btn-success">Editar</a>
                                    <button @onclick="@(() => BorrarArticulo(item))" class="btn btn-danger">Borrar</button>
                                </td>
                            </Authorized>
                        </AuthorizeView>
                        <td>@item.Nombre</td>
                        <td>@item.Marca</td>
                        <td>C$ @Math.Round(item.PrecioCompra, 2)</td>
                        <td>C$ @Math.Round(item.PrecioVenta, 2)</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>-->
@*Paginaccion*@
<!--<Paginaciones PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada"
              PaginasTotales="paginasTotales"></Paginaciones>-->


@code {
    //Paginacion
    private int paginaActual = 1;
    private int paginasTotales;
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private Articulo selectedItem1 = null;
    private string searchString1 = "";
    private string NombreArtFiltro = String.Empty; //filtros

    public List<Articulo> Articulos { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }


    //private async Task Cargar()
    //{
    //    var responseHttp = await repositorio.Get<List<Articulo>>("api/articulos");
    //    Articulos = responseHttp.Response;
    //}
    private async Task Cargar()
    {
        var httpResponse = await Http.GetAsync($"api/articulos");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            Articulos = JsonSerializer.Deserialize<List<Articulo>>(responseString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }

    }

    private async Task BorrarArticulo(Articulo articulo)
    {
        var responseHttp = await repositorio.Delete($"api/articulos/{articulo.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await Cargar();
        }

    }

    //Paginacion
    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }
    private async Task Cargar(int pagina = 1)
    {
        var responseHttp = await repositorio.Get<List<Articulo>>($"api/articulos?pagina={pagina}");
        if (!responseHttp.Error)
        {
            Articulos = responseHttp.Response;
            var conteo = responseHttp.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            paginasTotales = int.Parse(responseHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
    }

    void CrearArticulo()
    {
        NavigationManager.NavigateTo("creararticulo");
    }

    ///Buscar por nombre
    private bool FilterFunc1(Articulo element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Articulo element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nombre.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Marca.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task Filtrar()
    {
        await Cargar();
    }

    private async Task Limpiar()
    {
        NombreArtFiltro = string.Empty;
        await Cargar();
    }
}