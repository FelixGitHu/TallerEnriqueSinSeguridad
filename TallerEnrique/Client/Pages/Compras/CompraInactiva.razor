@page "/compras/inactiva"
@inject IRepositorio repositorio
@inject IMostrarMensajes mostrarMensajes
@inject HttpClient Http
@using System.Text.Json
@inject NavigationManager NavigationManager



@if (ComprasRealizadas == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <div class="spinner-grow text-success" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (ComprasRealizadas.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:24rem">
        <text>No se encontraron artículos.</text>
    </div>
}
else
{
    <MudTable Items="@ComprasRealizadas" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Compra, bool>(FilterFunc1)"
              @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Compras</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar compra..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>

            <MudTh Class="thead-dark">N° Factura</MudTh>
            <MudTh>Fecha</MudTh>
            <MudTh>Proveedor</MudTh>
            <MudTh>Impuesto</MudTh>
            <MudTh>Sub Total</MudTh>
            <MudTh>Total</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Factura">@context.NFactura</MudTd>
            <MudTd DataLabel="Fecha">@context.Fecha</MudTd>
            <MudTd DataLabel="Empresa">@context.Proveedor.NombreEmpresa</MudTd>
            <MudTd DataLabel="IVA">@Math.Round(@context.IVA, 2)</MudTd>
            <MudTd DataLabel="Sub Total">C$ @Math.Round(@context.SubTotal, 2)</MudTd>
            <MudTd DataLabel="Total"> C$ @Math.Round(@context.CostoTotal, 2)</MudTd>
            <MudTd>
                <MudFab Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Edit" Size="MudBlazor.Size.Small"
                        @onclick="@(() => NavigationManager.NavigateTo($"/compras/editar/{context.Id}"))" />
                <a href="/compras/editar/@context.Id" class="btn btn-success">Editar</a>
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
@code {

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private Compra selectedItem1 = null;
    private string searchString1 = "";
    private string NombreArtFiltro = String.Empty; //filtros

    public List<Proveedor> Proveedores { get; set; } = new List<Proveedor>();

    public List<Compra> ComprasRealizadas = new List<Compra>();

    protected async override Task OnInitializedAsync()
    {

        await getComprasRealizadas();
    }


    //}
    private async Task getComprasRealizadas()
    {
        var httpResponse = await Http.GetAsync($"api/compras/comprasinactivas");
        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            ComprasRealizadas = JsonSerializer.Deserialize<List<Compra>>(responseString,
            new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }

    }

    private async Task BorrarCompra(Compra compra)
    {
        var responseHttp = await repositorio.Delete($"api/compras/{compra.Id}");
        if (responseHttp.Error)
        {
            await mostrarMensajes.MostrarMensajeError(await responseHttp.GetBody());
        }
        else
        {
            await getComprasRealizadas();
        }

    }


    ///Buscar por nombre
    private bool FilterFunc1(Compra element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Compra element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Fecha.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Proveedor.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.IVA.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.SubTotal.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.CostoTotal.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.NFactura.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Proveedor.NombreEmpresa.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }


}